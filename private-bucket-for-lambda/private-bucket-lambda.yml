Transform: AWS::Serverless-2016-10-31

Description: Private access to S3 bucket for Lambda functions

Parameters:
  Username:
    Type: String
    Description: Your username which prepends the name of the resources

Resources:
  PrivateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Username}-private-bucket
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  PrivateBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PrivateBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:PutObject
              - s3:PutObjectTagging
            Effect: Deny
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PrivateBucket
                  - /*
            Principal: '*'
            Condition:
              StringNotEquals:
                'aws:SourceVpce': !Ref GatewayEndpoint
  UploaderFn:
    Type: AWS::Serverless::Function
    Properties:
      Description: Uploads objects to private S3 bucket
      Runtime: nodejs12.x
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');

        AWS.config.update({ region: 'us-east-1' });

        const s3 = new AWS.S3();

        exports.handler = async (event) => {
          const { author, title, store, seller } = event;

          console.log(`Uploading ${title} from ${author} to the private bucket`);

          const now = Date.now();
          const content = {
            author,
            title,
            seller,
            dateTime: now,
          }

          const params = {
            Bucket: process.env.PRIVATE_BUCKET,
            Key: `${now}-${author}-${title}`,
            Body: JSON.stringify(content),
            Tagging: `store=${store}`,
          };

          return s3.putObject(params).promise();
        }
      Role: !GetAtt UploaderFnRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Environment:
        Variables:
          PRIVATE_BUCKET: !Ref PrivateBucket
  UploaderFnRole:
    Type: AWS::IAM::Role
    DependsOn:
      - PrivateBucket
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${Username}-private-bucket-uploader
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectTagging
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Sub ${Username}-private-bucket
                      - '/*'
  UploadViaInternetFn:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function that won't be able to upload objects to S3
      Runtime: nodejs12.x
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');

        AWS.config.update({ region: 'us-east-1' });

        const s3 = new AWS.S3();

        exports.handler = async (event) => {
          const { author, title, store, seller } = event;

          console.log('This function call will fail with AccessDenied error');

          const now = Date.now();
          const content = {
            author,
            title,
            seller,
            dateTime: now,
          }

          const params = {
            Bucket: process.env.PRIVATE_BUCKET,
            Key: `${now}-${author}-${title}`,
            Body: JSON.stringify(content),
            Tagging: `store=${store}`,
          };

          return s3.putObject(params).promise();
        }
      Role: !GetAtt UploadViaInternetFnRole.Arn
      Environment:
        Variables:
          PRIVATE_BUCKET: !Ref PrivateBucket
  UploadViaInternetFnRole:
    Type: AWS::IAM::Role
    DependsOn:
      - PrivateBucket
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${Username}-upload-via-internet
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectTagging
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Sub ${Username}-private-bucket
                      - '/*'
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.16.0.0/24
  RouteTablePrivateSubnetA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPrivateSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref RouteTablePrivateSubnetA
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 10.16.1.0/24
  RouteTablePrivateSubnetB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPrivateSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref RouteTablePrivateSubnetB
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for the Lambda function
      GroupName: !Sub ${Username}-lambda-sg
      VpcId: !Ref VPC
  GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTablePrivateSubnetA
        - !Ref RouteTablePrivateSubnetB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
